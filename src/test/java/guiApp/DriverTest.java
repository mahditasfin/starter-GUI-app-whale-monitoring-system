/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package guiApp;

import ca.uvic.seng330.ex8.observation.*;
import guiApp.observation.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.Slider;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.testfx.api.FxAssert;
import org.testfx.api.FxRobot;
import org.testfx.framework.junit5.ApplicationExtension;
import org.testfx.framework.junit5.Start;

import static org.junit.jupiter.api.Assertions.*;


@ExtendWith(ApplicationExtension.class)
class DriverTest {



    private Button button;
    private static final int ROW_HEIGHT=24;
    private ListView<String> list;
    private ObservableList<String> items= FXCollections.observableArrayList("Orca", "Humpback", "Grey", "Porpoise");;
    private GridPane gridPane;
    private Scene scene;
    private Slider slider;

    private String testWhale1="Orca";
    private String testWhale2="Grey";
    private String testWhale3="Porpoise";
    private int testInt1=5;
    private int testInt2=9;
    private int testInt3=7;
    private ObservationChartPanel observationChartPanel;
    private InputObservationPanel inputObservationPanel;
    private LastUpdatePanel lastUpdatePanel;
    private ObservationData observationData1,observationData2,observationData3;
    private SubmitButtonBox submitButtonBox1;
    private String dataWhale1,dataWhale2,dataWhale3;
    private String testWhaleButton1,testWhaleButton2,testWhaleButton3;
    private String testWhaleObvPanel1,testWhaleObvPanel2,testWhaleObvPanel3;
    private String testWhaleUpPanel1,testWhaleUpPanel2,testWhaleUpPanel3;
    private String testWhaleInPanel1,testWhaleInPanel2,testWhaleInPanel3;
    private int dataInt1,dataInt2,dataInt3;
    private int testIntButton1,testIntButton2,testIntButton3;
    private int testIntObvPanel1,testIntObvPanel2,testIntObvPanel3;
    private int testIntUpPanel1,testIntUpPanel2,testIntUpPanel3;
    private int testIntInPanel1,testIntInPanel2,testIntInPanel3;





    /**
     * Will be called with {@code @Before} semantics, i. e. before each test method.
     *
     * @param stage - Will be injected by the test runner.
     */
    @Start
    private void start(Stage stage) {
        stage.setTitle("Test");
        gridPane=new GridPane();
        //for button
        button = new Button("Submit");
        button.setId("myButton"); //adding a (CSS) ID makes it possible to auto test.
        button.setOnAction(actionEvent -> button.setText("Submit"));


        list= new ListView<String>();
        list.setId("list");
        list.setItems(items);
        list.setPrefHeight(items.size()*ROW_HEIGHT+2);


        slider=createSlider();
        gridPane.add(button,0,4,1,1);
        gridPane.add(list,0,0,2,3);
        gridPane.add(slider,0,3,1,1);
        scene=new Scene(gridPane,300,200);

        stage.setScene(scene);
        stage.show();



        try {
            observationData1 = new ObservationData();
            observationData2 = new ObservationData();
            observationData3 = new ObservationData();
            observationData1.setNumber(testInt1);
            observationData1.setWhale(testWhale1);
            observationData2.setWhale(testWhale3);
            observationData2.setNumber(testInt3);
            observationData3.setWhale(testWhale2);
            observationData3.setNumber(testInt2);
        }catch(Exception e){
            fail();
        }
    }

    /**
     * @param robot - Will be injected by the test runner.
     *              Checks if the slider interface is showing correct numbers
     */
    @Test
    void slider_tests(FxRobot robot){
        robot.clickOn("#intSlider");
        FxAssert.verifyThat(slider,l->l.isShowTickLabels()&& l.getValue()==5 && l.isShowTickMarks() && l.getMinorTickCount()==0 && l.getMajorTickUnit() == 1);

    }

    /**
     * @param robot - Will be injected by the test runner
     *              Checks if the user sees the correct items in the SpeciesPanel
     */
    @Test
    void listView_tests(FxRobot robot) {
        robot.clickOn("#list");
        FxAssert.verifyThat(list, l -> l.getItems() == items);
    }

    /**
     * unit test of the observationData class
     * similar ObservationData is used for consistency
     */
    @Test
    void observation_data_test(){
        try {
            dataWhale1 = observationData1.getWhale();
            dataInt1 = observationData1.getNumber();
            dataWhale2 = observationData2.getWhale();
            dataInt2=observationData2.getNumber();
            dataWhale3 = observationData3.getWhale();
            dataInt3=observationData3.getNumber();
        }catch(Exception e){
            fail();
        }
        assertEquals(dataWhale1,testWhale1);
        assertNotEquals(dataWhale2,testWhale2);
        assertEquals(dataWhale3,testWhale2);

        assertEquals(dataInt1,testInt1);
        assertNotEquals(dataInt2,testInt2);
        assertEquals(dataInt3,testInt2);
    }

    /**
     * unit test of the SubmitButtonBox class
     * similar ObservationData is used for consistency
     */
    @Test
    void submitButtonBox_tests(){
        try {
            submitButtonBox1 = new SubmitButtonBox(observationData1);
            testWhaleButton1 = submitButtonBox1.getWhaleFromButton();
            testIntButton1 = submitButtonBox1.getNumberFromButton();
            submitButtonBox1 = new SubmitButtonBox(observationData2);
            testWhaleButton2 = submitButtonBox1.getWhaleFromButton();
            testIntButton2 = submitButtonBox1.getNumberFromButton();
            submitButtonBox1 = new SubmitButtonBox(observationData3);
            testWhaleButton3 = submitButtonBox1.getWhaleFromButton();
            testIntButton3 = submitButtonBox1.getNumberFromButton();
        }catch(Exception e) {
            fail();
        }

        assertEquals(testWhaleButton1,testWhale1);
        assertNotEquals(testWhaleButton2,testWhale2);
        assertEquals(testWhaleButton3,testWhale2);

        assertEquals(testIntButton1,testInt1);
        assertNotEquals(testIntButton2,testInt2);
        assertEquals(testIntButton3,testInt2);
    }

    /**
     * unit test of the ObservationChartPanel class
     * similar ObservationData is used for consistency
     */
    @Test
    void setObservationChartPanel_tests(){
        try{
            observationChartPanel =new ObservationChartPanel(observationData1);
            testWhaleObvPanel1= observationChartPanel.getWhale();
            testIntObvPanel1=observationChartPanel.getNumber();
            observationChartPanel =new ObservationChartPanel(observationData2);
            testWhaleObvPanel2= observationChartPanel.getWhale();
            testIntObvPanel2=observationChartPanel.getNumber();
            observationChartPanel =new ObservationChartPanel(observationData3);
            testWhaleObvPanel3= observationChartPanel.getWhale();
            testIntObvPanel3=observationChartPanel.getNumber();

        }catch(Exception e){
            fail();
        }

        assertEquals(testWhaleObvPanel1,testWhale1);
        assertNotEquals(testWhaleObvPanel2,testWhale2);
        assertEquals(testWhaleObvPanel3,testWhale2);

        assertEquals(testIntObvPanel1,testInt1);
        assertNotEquals(testIntObvPanel2,testInt2);
        assertEquals(testIntObvPanel3,testInt2);
    }

    /**
     * unit test of the lastUpdatePanel class
     * similar ObservationData is used for consistency
     */
    @Test
    void lastUpdatePanel_tests(){
        try{
            lastUpdatePanel=new LastUpdatePanel(observationData1);
            testWhaleUpPanel1=lastUpdatePanel.getWhaleFromUpdate();
            testIntUpPanel1=lastUpdatePanel.getNumberFromUpdate();
            lastUpdatePanel=new LastUpdatePanel(observationData2);
            testWhaleUpPanel2=lastUpdatePanel.getWhaleFromUpdate();
            testIntUpPanel2=lastUpdatePanel.getNumberFromUpdate();
            lastUpdatePanel=new LastUpdatePanel(observationData3);
            testIntUpPanel3=lastUpdatePanel.getNumberFromUpdate();
            testWhaleUpPanel3=lastUpdatePanel.getWhaleFromUpdate();
        }catch(Exception e){
            fail();
        }
        assertEquals(testWhaleUpPanel1,testWhale1);
        assertNotEquals(testWhaleUpPanel2,testWhale2);
        assertEquals(testWhaleUpPanel3,testWhale2);

        assertEquals(testIntUpPanel1,testInt1);
        assertNotEquals(testIntUpPanel2,testInt2);
        assertEquals(testIntUpPanel3,testInt2);

    }

    /**
     * unit test of the inputObservationPanel class
     * similar ObservationData is used for consistency
     */
    @Test
    void inputObservationPanel_tests(){
        try{
            inputObservationPanel=new InputObservationPanel(observationData1);
            testWhaleInPanel1=inputObservationPanel.getWhaleFromObservation();
            testIntInPanel1=inputObservationPanel.getNumberFromObservation();
            inputObservationPanel=new InputObservationPanel(observationData2);
            testWhaleInPanel2=inputObservationPanel.getWhaleFromObservation();
            testIntInPanel2=inputObservationPanel.getNumberFromObservation();
            inputObservationPanel=new InputObservationPanel(observationData3);
            testWhaleInPanel3=inputObservationPanel.getWhaleFromObservation();
            testIntInPanel3=inputObservationPanel.getNumberFromObservation();
        }catch(Exception e){
            fail();
        }

        assertEquals(testWhaleInPanel1,testWhale1);
        assertNotEquals(testWhaleInPanel2,testWhale2);
        assertEquals(testWhaleInPanel3,testWhale2);


        assertEquals(testIntInPanel1,testInt1);
        assertNotEquals(testIntInPanel2,testInt2);
        assertEquals(testIntInPanel3,testInt2);
    }

    /**
     * @return A similar slider used in the app is returned
     */
    private static Slider createSlider() {
        Slider slider = new Slider(1, 10, 5);
        slider.setId("intSlider");
        slider.setShowTickMarks(true);
        slider.setShowTickLabels(true);
        slider.setMinWidth(ObservationApp.WIDTH);
        slider.setMajorTickUnit(1);
        slider.setBlockIncrement(1);
        slider.setMinorTickCount(0);
        slider.setSnapToTicks(true);
        return slider;
    }

}
