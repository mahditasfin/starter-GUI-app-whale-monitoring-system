plugins {
    id 'java'
    id 'application'
    id 'pmd'
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    jcenter()
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'

    //TestFX for JavaFx
    testCompile "org.testfx:testfx-core:4.0.16-alpha"
    testCompile "org.hamcrest:hamcrest:2.1"
    testCompile "org.testfx:testfx-junit5:4.0.16-alpha"
}

application {
    // Define the main class for the application.
//    mainClassName = 'ca.uvic.seng330.ex8.observation.javafxsample.LuckyNumber'
    mainClassName = 'ca.uvic.seng330.ex8.observation.ObservationApp'

}

javafx {
    version = '11.0.2'

    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.media', 'javafx.graphics']
}

pmd {
    consoleOutput = true
    toolVersion = "6.21.0"
    rulePriority = 5
    ruleSets = ["category/java/errorprone.xml",
                "category/java/bestpractices.xml",
                "category/java/design.xml",
                "category/java/codestyle.xml",
                "category/java/multithreading.xml"]
}
javadoc{
    source=sourceSets.main.allJava
    classpath=configurations.compile
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

// adds integration testing in the src/intTest folder
sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    intTestImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    useJUnitPlatform()
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn integrationTest